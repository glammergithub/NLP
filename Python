Pycharm 快捷键
ALT+F7替换
CTRL+N新建一个类
SHIFT+F6给变量改名字
SHIFT+ESC隐藏编辑器
F12还原
CTRL+W选中单词
CTRL+/批量注释
http://blog.csdn.net/a359680405/article/details/45074761安装PYQT5
在python脚本文件，运行Python交互式解释器。
分块开发程序，在整合它们之前测试每一块代码是否达到你的预期是很重要的。 这也是Python交互式解释器的价值所在，也是为什么你必须适应它的原因
from __future__ import division#放在程序开头保证用浮点除法

nltk.download()
from nltk.book import *
text1.concordance("monstrous")#搜索文章中的词语
text3.concordance("lived")
text1.similar("monstrous")#近义词
text2.common_contexts(["monstrous","very"])#两个词共同的上下文

set(text3)#text3中所有标点，单词的集合，去重
sorted(set(text3))#text3中的所有标点、单词排序之后，去重
len(set(text3))#text3的独一无二的标点、单词类型个数，称为唯一项目类型

print(len(text3) / len(set(text3)))#每个字平均被使用的次数
print(text3.count("smote"))#统计一个词语在一个文本中出现的次数
print(100 * text4.count('a') / len(text4))#'统计一个词语占全部词语的百分比是多少

函数def关键字定义,lexical_diversity为函数名，text为参数
def lexical_diversity(text):
    return len(text) / len(set(text))
print(lexical_diversity(text3));
def percentage(count, total):
    return  100 * count / total

a = ['Call','me','Ishmael','.']
print(a[1])#索引是从0开始的
print(text4[173]);#找到索引处的元素
print(text4.index('awaken'));#找到元素第一次出现的索引
print(text5[16715:16735])#获取链表中任意片段中的元素

sent = ['word1','word2','word3','word4','word5','word6','word7','word8','word9','word10'];
print(sent[5:8])#sent[m:n] m:n-1 m represents index
print(sent[:3])#from the first to index 3(exclude index3)
print(sent[3:])#from index3 to the end
sent[0] = 'First'#replace 'word1' to 'First'
sent[1:9] = ['First','Last']#replace index 1~index 9 to the designated two words

#assignment(赋值):variation = expression ,words ahead ,numbers and '_' is permitted
my_sent = ['a','wwe','eee']
noun = my_sent[0:3]
print(sorted(noun))#capital is ahead of lowercase

#operation on character string
a = 'Monty'
print(a[0])#'M'
print(a[:4])#'Mont'
#connect character string
print(''.join(['Monty','Python','asd']))
#split two character string
print('Monty Pytho n'.split())

统计分布
1.找出文本中最常见的50个词
fdist = FreqDist(text1)
vocabulary = fdist.keys()
voc = list(vocabulary)#必须得转换成list才能用
print(fdist)#print the number of words
print(voc[:50])#分片前50个
print(fdist['whale'])#the number of 'whale'
fdist.plot(50,cumulative = True)#画出图案，需要安装pyqt
2.找出text1中长度超过15个字符的词并排序
V = set(text1)
long_words = [w for w in V if len(w) > 15]
print(sorted(long_words))
3.找出长度超过7个字符并且出现次数超过7次的词
fdist5 = FreqDist(text5)
print(sorted([w for w in set(text5) if len(w) > 7 and fdist5[w] > 7]))
4.搭配：经常出现的词的序列，词对、双连词：找到在一起出现的两个词
print(bigrams(['more','is','said','than','done']))#找词对，有问题
text4.collocations()#找到出现频繁的双连词
5.输出text1中每个词的长度
print([len(w) for w in text1])
6.文本中的词的长度的性质统计
fdist = FreqDist(len(w) for w in text1)#FreqDist计数链表中每个长度出现的次数
print(fdist.keys())#输出的是包含的元素的不同词长
print(fdist.items())#以（a,b)输出a长度的词出现了b次
print(fdist.max())#输出出现次数最多的长度
print(fdist[3])#输出长度为3的词出现的次数
print(fdist.freq(3))#输出长度为3的词出现的次数占总词数的比例
print(fdist.N())#输出样本总数
fdist.plot()#绘制频率分布图
fdist.plot(cumulative=True)#绘制累积频率分布图
8.决策
[w for w in sent7 if len(w) < 4]#输出sent7中长度小于4的元素
sorted([w for w in set(text1) if w.endswith('ableness')])#输出以ableness结尾的单词并排序
s.startswith(t) 测试 s 是否以t 开头 
s.endswith(t) 测试 
s 是否以t 结尾 tin s 
测试 s 是否包含t s.islower() 
测试 s 中所有字符是否都是小写字母 
s.isupper() 测试 s 中所有字符是否都是大写字母 
s.isalpha() 测试 s 中所有字符是否都是字母 
s.isalnum() 测试 s 中所有字符是否都是字母或数字 
s.isdigit() 测试 s 中所有字符是否都是数字 
s.istitle() 测试 s 是否首字母大写（s 中所有的词都首字母大写）
9.控制
（1）对每个元素进行操作
[len(w)for w in text1] 
[w.upper()for w in text1] 
这些表达式形式为[f(w) for ...]或[w.f() for ...]，其中 f是一个函数，用来计算词长或把字母转换为大写

len(set(word.lower()for word in text1))
由于我们不重复计算像This和this这样仅仅大小写不同的词，就已经从词汇表计数中抹去了2,000个！
len(set(word.lower()for word in text1 if word.isalpha()))
通过过滤掉所有非字母元素，从词汇表中消除数字和标点符号

（2）嵌套代码块
控制结构：
1. if len(word) < 5:#（注意冒号）
     print('word length is less than 5')#注意段首空tab
...#该行空出来，再下一行输出
#如果不满足if成立条件，没有输出

2.for word in ['Call','me','Ishmael','.']:
     print(word)
...#空一行，下一行输出

3.sent1 = ['Call','me','Ishmael','.']
for word in sent1:
     if word.endswith('l'):
             print(word)
...
Call
Ishmael
在 if 和for语句所在行末尾——缩进开始之前——有一个冒号
所有的Python控制结构都以冒号结尾。冒号表示当前语句与后面的缩进块有关联。 

4.for token in sent1:
...     if token.islower():
...             print(token,'is a lowercase word')
...     elif token.istitle():
...             print(token,'is a titlecase word')
...     else :
...             print (token,'is punctuation')
...
Call is a titlecase word
me is a lowercase word
Ishmael is a titlecase word
. is punctuation
