Pycharm 快捷键
ALT+F7替换
CTRL+N新建一个类
SHIFT+F6给变量改名字
SHIFT+ESC隐藏编辑器
F12还原
CTRL+W选中单词
CTRL+/批量注释

from __future__ import division#放在程序开头保证用浮点除法

nltk.download()
from nltk.book import *
text1.concordance("monstrous")#搜索文章中的词语
text3.concordance("lived")
text1.similar("monstrous")#近义词
text2.common_contexts(["monstrous","very"])#两个词共同的上下文

set(text3)#text3中所有标点，单词的集合，去重
sorted(set(text3))#text3中的所有标点、单词排序之后，去重
len(set(text3))#text3的独一无二的标点、单词类型个数，称为唯一项目类型

print(len(text3) / len(set(text3)))#每个字平均被使用的次数
print(text3.count("smote"))#统计一个词语在一个文本中出现的次数
print(100 * text4.count('a') / len(text4))#'统计一个词语占全部词语的百分比是多少

函数def关键字定义,lexical_diversity为函数名，text为参数
def lexical_diversity(text):
    return len(text) / len(set(text))
print(lexical_diversity(text3));
def percentage(count, total):
    return  100 * count / total

a = ['Call','me','Ishmael','.']
print(a[1])#索引是从0开始的
print(text4[173]);#找到索引处的元素
print(text4.index('awaken'));#找到元素第一次出现的索引
print(text5[16715:16735])#获取链表中任意片段中的元素

sent = ['word1','word2','word3','word4','word5','word6','word7','word8','word9','word10'];
print(sent[5:8])#sent[m:n] m:n-1 m represents index
print(sent[:3])#from the first to index 3(exclude index3)
print(sent[3:])#from index3 to the end
sent[0] = 'First'#replace 'word1' to 'First'
sent[1:9] = ['First','Last']#replace index 1~index 9 to the designated two words

#assignment(赋值):variation = expression ,words ahead ,numbers and '_' is permitted
my_sent = ['a','wwe','eee']
noun = my_sent[0:3]
print(sorted(noun))#capital is ahead of lowercase

#operation on character string
a = 'Monty'
print(a[0])#'M'
print(a[:4])#'Mont'
#connect character string
print(''.join(['Monty','Python','asd']))
#split two character string
print('Monty Pytho n'.split())

统计分布
1.找出文本中最常见的50个词
fdist = FreqDist(text1)
vocabulary = fdist.keys()
voc = list(vocabulary)#必须得转换成list才能用
print(fdist)#print the number of words
print(voc[:50])#分片前50个
print(fdist['whale'])#the number of 'whale'
fdist.plot(50,cumulative = True)#画出图案，需要安装pyqt
2.找出text1中长度超过15个字符的词并排序
V = set(text1)
long_words = [w for w in V if len(w) > 15]
print(sorted(long_words))
3.找出长度超过7个字符并且出现次数超过7次的词
fdist5 = FreqDist(text5)
print(sorted([w for w in set(text5) if len(w) > 7 and fdist5[w] > 7]))
4.搭配：经常出现的词的序列，词对、双连词：找到在一起出现的两个词
print(bigrams(['more','is','said','than','done']))#找词对，有问题
text4.collocations()#找到出现频繁的双连词

